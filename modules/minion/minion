#!/usr/bin/env python2.7
"""Creates and manages a folder full of reminder files.

Usage:
    minion collect [--archives] [--year=<year>] <text> ...
    minion count [--archives] <text> ...
    minion command <command> <filename>
    minion dates [<text>] ...
    minion find [--archives] [--files] <text> ...
    minion favorites
    minion folder <text> ...
    minion folders
    minion here [--template=<template>] [--quick] <text> ...
    minion last [--archives]
    minion list [--archives] [--max=<max>] [--files] <text> ...
    minion log <log> <comment> ...
    minion note [--folder=<folder>] [--template=<template>] [--quick] <text> ...
    minion open [--archives] [--max=<max>] <text> ...
    minion openall [--archives] [--max=<max>] <text> ...
    minion recent [--archives] [--days=<days>] [--files] [<text>] ...
    minion remind [--folder=<folder>] [--template=<template>] <text> ...
    minion sample [--files] <text> ...
    minion sort <text> ...
    minion strays
    minion summary [--archives] [--max=<max>]
    minion view [--archives] [--max=<max>] <text> ...
    minion tags
    minion template [--folder=<folder>] <template> [--quick] [<text>] ...

Options:
    -a --archives            Search archive folders for matches.
    -d --days=<days>         Show notes modified last N days .
    -f --files               Display raw file names when listing files.
    -F --folder=<folder>     Place the new note into the given folder.
    -h --help                Show this help.
    -m --max=<max>           Maximum results to display. [default: 10]
    -q --quick               Create without opening in an editor
    -t --template=<template> Use template. [default: 'note']
    -y --year=<year>         Limit results to those created in the given year.
    -v --version             Show version.

Command descriptions:
    count - display a count of the results
    dates - display matching files with dates, in date order
    find - like list, but returns *any* match to *any* given keyword.
    favorites - like summary, but displays only folders configured as favorites
    folder - find and open a folder
    folders - reduce folders by sorting items in folders with fewer items
    here - create a note in the current working directory
    last - reopen the last modified file (by file system modified date/time)
    list - list files matching keywords
    log - add a line with the current date and time to a file.
    note - create a new note and then open it - <text> becomes filename
    open - open an existing note
    openall - open all matches found
    recent - list recent notes with given keywords
    remind - create a new file where <text> becomes filename
    sample - find up to 5 random results that match <text>
    sort - step through results matching <text>
            tag, rename, and sort files into folders
    strays - interactively sort any files whose folder only contains
            a few items.
    summary - list all folders and the item counts in those folders
    view - print the contents of all matches to the terminal standard output
    tags - list all tags
    template - start a note from a specialized template. Try 'week' and
            'journal' to get started.
"""

# #babyTeddySays: m'0']..p p j\[ ''

# Copyright 2011-2012 Edward Delaporte <edthedev@gmail.com>
# Licensed under the GPLv2.
# Created: 2011-04-28

#  TODO: Can we merge the 'note' and 'open' commands, resulting in less
#  duplication with new notes, and less need to call collect?

###############################################################################
# IMPORTS
###############################################################################

import os
import datetime
# DocOpt is awesome. https://github.com/docopt/docopt
from docopt import docopt
import brain_of_minion as brain
from brain_of_minion import get_date_format
import sys


###############################################################################
# CONSTANTS
###############################################################################

CLEAN_SORT_MESSAGE = '''*~*~*~*~*~*~*~*~*~*~*~*
 No items to be sorted
*~*~*~*~*~*~*~*~*~*~*~*
'''

CLEAN_STRAYS_MESSAGE = '''*~*~*~*~*~*~*~*
 No stray items
*~*~*~*~*~*~*~*
'''


###############################################################################
# HELPER FUNCTIONS
###############################################################################

def get_match_files(days=None):
    match_files = brain.find_files(
        filter=args['<text>'],
        archives=args['--archives'],
        days=days)
    return match_files


def should_collect(filename):
    filename, ext = os.path.splitext(filename)
    allowed_ext = ['.txt', '.rst']
    if ext in allowed_ext:
        # Hack to avoid collecting collections.
        if 'Collected' not in filename:
            return True
    return False


def date_sort(filename):
    '''Provide a date sort that puts None first.'''
    content = brain.get_file_content(filename)
    first_date = brain.get_first_date(content)
    if first_date:
        return first_date
    return datetime.datetime.now()


def format_2_cols(tuple_list):
    SEPARATOR = " - "
    PADDING = ' '
    output = []

    col_max = {}

    # Find longest column members
    for tup in tuple_list:
        line = ""
        col = 0
        for item in tup:
            item = str(item)
            col += 1
            if item not in col_max:
                col_max[col] = 0
            if len(item) > col_max[col]:
                col_max[col] = len(item)

    # Build the string
    for tup in tuple_list:
        col = 0
        line = ""
        for item in tup:
            item = str(item)
            col += 1

            # Separator when needed.
            if len(line) != 0:
                line += SEPARATOR

            # Padded line item.
            while len(item) < col_max[col]:
                item += PADDING
            line += item
        output.append(line)
    output = '\n'.join(output)
    return output


###############################################################################
# ENTRY POINT FUNCTIONS
###############################################################################

def minion_template(args):
    '''Create a Minion note from a specialized template.'''
    params = PARAMS
    # Use the template specified on the command line
    params['note_template'] = args['<template>']
    brain.new_note_interactive(**params)


def minion_remind(args):
    '''Set a quick reminder.'''
    params = PARAMS
    # Don't open it, just make it.
    params['quick'] = True
    brain.new_note_interactive(**params)


def minion_here(args):
    '''Create a Minion note in the current working directory.'''
    params = PARAMS
    # Use current directory
    params['notes_dir'] = os.curdir
    brain.new_note_interactive(**params)


def minion_note(args):
    '''Create a Minion note.'''
    # It's the most common use, so use the default PARAMS exactly.
    brain.new_note_interactive(**PARAMS)


def minion_sort(args):
    '''Interactively sort all matches.'''
    match_files = get_match_files()
    if len(match_files) == 0:
        print CLEAN_SORT_MESSAGE
    else:
        brain.sort_files_interactive(match_files)


def minion_open(args):
    match_files = get_match_files()

    if len(match_files) > 0:
        (choice_path, filename) = brain.select_file(match_files, args['--max'])
        brain.open_in_editor(filename)
    else:
        brain.display_output(title=filter, output=match_files)


def minion_openall(args):
    match_files = get_match_files()
    brain.open_files(match_files, max=args['--max'])


def minion_strays(args):
    ''' Run an interactive sort on the contents of any folders that
        only have one or two items.
    '''
    match_files = brain.list_stray_files()
    total = len(match_files)
    if total == 0:
        print CLEAN_STRAYS_MESSAGE
        sys.exit()
    else:
        # print brain.getOutput('cal')
        brain.sort_files_interactive(match_files)


def minion_view(args):
    ''' Dump the contents of the chosen file(s) to standard out. '''
    match_files = get_match_files()
    print "Outputting contents of %(number)d matches to search terms \
        '%(terms)s'.".format(number=len(match_files), terms=args['<text>'])
    for filename in match_files:
        brain.file_to_stdout(filename)


def minion_log(args):
    '''Add a quick additional line to an existing (or new) Minion file.'''

    # Find the log file.
    params = {
        'filter': [args['<log>']],
        'archives': args['--archives'],
    }
    filename, match_files = brain.choose_file(**params)
    if not filename:
        title = ("Too many matches for log "
                 "function with keyword '{}'").format(args['<log>'])
        brain.display_output(title, match_files, max_display=10)
        return False

    params = {
        'filename': filename,
        'line': ' '.join(args['<comment>']),
    }

    brain.log_line_to_file(**params)


def minion_dates(args):
    '''Display all notes with dates in them and filtered by keywords.'''
    events = dict()
    match_files = get_match_files()
    for filename in match_files:
        content = brain.get_file_content(filename)
        dates = brain.get_unique_dates(content)
        if dates:
            for date in dates:
                try:
                    if date in events:
                        events[date].append(filename)
                    else:
                        events[date] = [filename]
                except ValueError:
                    # Date before 1900
                    pass

    days_back = int(brain.get_setting('notes', 'default_recent_days'))
    recent_date = datetime.datetime.today() - datetime.timedelta(days=days_back)
    recent_date = recent_date.date()
    upcoming = dict()
    recent = dict()
    today = dict()
    # Sort the events into three sets - past, today and upcoming
    today_date = datetime.datetime.today().date()
    for key in events:
        date_str = key.strftime(get_date_format())
        if key > today_date:
            upcoming[date_str] = events[key]
        elif key == today_date:
            today[date_str] = events[key]
        elif key > recent_date:
            recent[date_str] = events[key]

    brain.display_output('Recent Dates', recent)
    print
    brain.display_output('Today', today)
    print
    brain.display_output('Upcoming Dates', upcoming)
    print


def minion_recent(args):
    ''' Show N most recent notes'''
    try:
        days_back = int(args['--days'])
    except:
        days_back = int(brain.get_setting('notes', 'default_recent_days'))

    match_files = get_match_files(days=days_back)
    recent_files = brain.list_recent(match_files)
    print "Notes modified in last %s days (most recent last):" % days_back
    brain.display_output(
        title=args['<text>'],
        output=recent_files,
        raw_files=args['--files'])


def minion_last(args):
    ''' Open the most recently modified file. '''
    filename = brain.get_last_modified(archives=args['--archives'])
    brain.open_in_editor(filename)

###############################################################################
# MAIN SCRIPT
###############################################################################

# Parse the input arguments; see docopt manual on github.com
args = docopt(__doc__, version='1.0')

# Search terms to filter by.
filter = args['<text>']
if args['<text>'] == ['all']:
    args['<text>'] = []

###############################################################################
# Shared parameters
#
#   These parameters are used by many function calls below.
###############################################################################
PARAMS = {
    'topic_fragments': args['<text>'],
    'notes_dir': None,
    'note_template': None,
    'quick': False
}

# Assign folder per command line parameter
if args['--folder']:
    folder = os.path.expanduser(args['--folder'])
    notes_home = brain.get_notes_home()
    PARAMS['notes_dir'] = os.path.join(notes_home, folder)

if args['--template']:
    PARAMS['note_template'] = args['--template']

if args['--quick']:
    PARAMS['quick'] = True


# *************************************************************
# Everything after this point requires searching for matches...
# *************************************************************

# Collect stories
if args['collect']:
    if '<year>' in args:
        YEAR = args['<year>']
        match_files = get_match_files()
        collected_matches = brain.limit_to_year(YEAR, match_files)
        collection_title = 'Collected-%s-%s' % (YEAR, ' '.join(filter))

        print "%d/%d %s stories occur in year %s" % (
            len(collected_matches),
            len(match_files),
            filter,
            str(YEAR),
        )
    else:
        collected_matches = match_files
        collection_title = 'Collected-%s' % (' '.join(filter))

    brain.display_output(collection_title, collected_matches)

    collected_string = collection_title

    sorted_matches = sorted(collected_matches, key=date_sort)

    for filename in sorted_matches:
        # Don't include past collections...
        if should_collect(filename):
            f = open(filename, 'r')
            lines = f.read()
            f.close()
            collected_string += '\n'
            collected_string += '\n'
            collected_string += lines

    collected_filename = brain.get_filename_for_title(collection_title)

    f = open(collected_filename, 'w')
    f.write(collected_string)
    f.close()
    brain.display_output('Created Collection', collected_filename)


if args['command'] and args['<command>'] and args['<filename>']:
    brain.apply_command_to_file(
        args['<filename>'],
        args['<command>'])

if args['count']:
    search_terms = "%s: %s" % (
        os.path.basename(brain.get_notes_home()), ','.join(args['<text>'])
    )
    match_files = get_match_files()
    count = len(match_files)
    print "%d - %s" % (count, search_terms)
    sys.exit()

# List the results
if args['find'] or args['list']:
    find_any = False
    if args['find']:
        find_any = True
    match_files = brain.find_files(filter=filter, archives=args['--archives'],
                                   find_any=find_any)

    # Set archives if no finds...
    total = brain.get_total_file_count(args['--archives'])

    # Display results / total
    notes_home = brain.get_notes_home()
    match_template = "{matching} of {total} files match search " +\
        "'{search}' in directory {directory}"
    print match_template.format(
        directory=notes_home,
        matching=len(match_files),
        search=','.join(filter),
        total=total)

    # Display results
    # print match_files
    brain.display_output(
        title=None,
        output=match_files,
        raw_files=args['--files'],
    )

    sys.exit(0)

if args['favorites']:
    print brain.print_favorites_summary()

if args['summary']:
    summary = brain.get_folder_summary(archives=args['--archives'])
    limit = int(args['--max'])
    summary = summary[:limit]
    output = format_2_cols(summary)
    print output

if args['folder']:
    # TODO: Do interactive inbox search, but for directories, not files
    print "Not implemented yet."

if args['folders']:
    updated_files = []
    # match_files = get_match_files()
    match_files = brain.find_files()
    # All poorly used folders
    too_few = 5
    notes_home = brain.get_notes_home()
    for folder in os.listdir(brain.get_notes_home()):
        folder = os.path.join(notes_home, folder)
        if os.path.isdir(folder):
            if len(os.listdir(folder)) < too_few:
                items = brain.find_files(filter=folder)
                for item in items:
                    updated_files.append(item)

    match_files = updated_files

    total = len(match_files)
    count = 0
    for item in match_files:
        count += 1
        print brain.to_bar(count, total)
        files_to_open = brain.doInboxInteractive(item)

if args['tags']:
    # TODO: Rid of this. Concept of 'tags' does not play well with the
    #       filesystem.
    # TODO: Switch to simply using any word as a 'tag'.
    # So what is 'poorly tagged'? Too short of a name? Too many common words?

    # A 'tag cloud' would be pretty awesome...
    boring = ['the', 'this']
    notes_home = brain.get_notes_home()
    all_files = brain.find_files()
    word_count = dict()
    for filename in all_files:
        filename = filename.replace(notes_home, '')
        filename = filename.replace('/', '-').replace('.', '-')
        words = filename.split('-')
        print words
        for word in words:
            if word in word_count:
                word_count[word] += 1
            else:
                word_count[word] = 1
    # word_count.sort()
    print word_count


# Run all the things!!!!
if __name__ == '__main__':
    # Run any method named in the keyword args.
    # Cool hack: use DocOpt args to call methods in this file.
    # Note that this only avails those methods whose name matches a documented
    #     arg.
    for method in dir():
        argname = method.replace('minion_', '')
        if (argname in args) and args[argname]:
            if hasattr(locals()[method], '__call__'):
                # print "Running {}".format(method)
                locals()[method](args)

sys.exit(0)
